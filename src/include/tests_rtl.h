#pragma once

void test_RtlAnsiStringToUnicodeString();
void test_RtlAppendStringToString();
void test_RtlAppendUnicodeStringToString();
void test_RtlAppendUnicodeToString();
void test_RtlAssert();
void test_RtlCaptureContext();
void test_RtlCaptureStackBackTrace();
void test_RtlCharToInteger();
void test_RtlCompareMemory();
void test_RtlCompareMemoryUlong();
void test_RtlCompareString();
void test_RtlCompareUnicodeString();
void test_RtlCopyString();
void test_RtlCopyUnicodeString();
void test_RtlCreateUnicodeString();
void test_RtlDowncaseUnicodeChar();
void test_RtlDowncaseUnicodeString();
void test_RtlEnterCriticalSection();
void test_RtlEnterCriticalSectionAndRegion();
void test_RtlEqualString();
void test_RtlEqualUnicodeString();
void test_RtlExtendedIntegerMultiply();
void test_RtlExtendedLargeIntegerDivide();
void test_RtlExtendedMagicDivide();
void test_RtlFillMemory();
void test_RtlFillMemoryUlong();
void test_RtlFreeAnsiString();
void test_RtlFreeUnicodeString();
void test_RtlGetCallersAddress();
void test_RtlInitAnsiString();
void test_RtlInitUnicodeString();
void test_RtlInitializeCriticalSection();
void test_RtlIntegerToChar();
void test_RtlIntegerToUnicodeString();
void test_RtlLeaveCriticalSection();
void test_RtlLeaveCriticalSectionAndRegion();
void test_RtlLowerChar();
void test_RtlMapGenericMask();
void test_RtlMoveMemory();
void test_RtlMultiByteToUnicodeN();
void test_RtlMultiByteToUnicodeSize();
void test_RtlNtStatusToDosError();
void test_RtlRaiseException();
void test_RtlRaiseStatus();
void test_RtlTimeFieldsToTime();
void test_RtlTimeToTimeFields();
void test_RtlTryEnterCriticalSection();
void test_RtlUlongByteSwap();
void test_RtlUnicodeStringToAnsiString();
void test_RtlUnicodeStringToInteger();
void test_RtlUnicodeToMultiByteN();
void test_RtlUnicodeToMultiByteSize();
void test_RtlUnwind();
void test_RtlUpcaseUnicodeChar();
void test_RtlUpcaseUnicodeString();
void test_RtlUpcaseUnicodeToMultiByteN();
void test_RtlUpperChar();
void test_RtlUpperString();
void test_RtlUshortByteSwap();
void test_RtlWalkFrameChain();
void test_RtlZeroMemory();
void test_RtlRip();
